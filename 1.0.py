#‚Å°‚Å¢‚Å£‚Å¢1‚Å°
#print ("‚Å°‚Å¢‚Å£‚Å¢Kyrgyzsta‚Å°‚Å¢‚Å£‚Å¢n‚Å°")
#
#moon = 'no'
#while moon == 'no':
#
#    sun = input ("–û–±–ª–∞—Å—Ç—å >> ")              #‚Å°‚Å¢‚Å£‚Å¢–î–æ–ø–æ–ª–Ω–∏—Ç—å‚Å°
#
#    if sun == '–ß—É–π':
#        print ("–ß—É–π 28 –≥—Ä–∞–¥—É—Å–æ–≤ ")
#
#    elif sun == '–¢–∞–ª–∞—Å':
#        print ("–¢–∞–ª–∞—Å 22 –≥—Ä–∞–¥—É—Å–æ–≤ ")
#
#    elif sun == '–´—Å—ã–∫-–ö—É–ª—å':
#        print ("–´—Å—ã–∫_–ö—É–ª—å 30 –≥—Ä–∞–¥—É—Å–æ–≤ ")
#
#    elif sun == '–ù–∞—Ä—ã–Ω':
#        print ( "–ù–∞—Ä—ã–Ω 15 –≥—Ä–∞–¥—É—Å–æ–≤ ")
#
#    elif sun == '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥':
#        print ( "–î–∂–∞–ª–∞–ª-–ê–±–∞–¥ 26 –≥—Ä–∞–¥—É—Å–æ–≤ ")
#
#    elif sun == '–û—à':
#        print ("–û—à 32 –≥—Ä–∞–¥—É—Å–æ–≤ ")
#
#    elif sun == '–ë–∞—Ç–∫–µ–Ω':
#        print ("–ë–∞—Ç–∫–µ–Ω 24 –≥—Ä–∞–¥—É—Å–æ–≤")
#    elif sun :
#        print ("Error")
#
#    moon = input ('–ó–∞–≤–µ—Ä—à–∏—Ç—å ( no ) >> ')


#
#print("Kyrgyzstan")
#
#a = float ( input ("–ß—É–π "))
#b = float ( input ("–¢–∞–ª–∞—Å "))
#c = float ( input ("–´—Å—ã–∫-–ö–æ–ª "))
#d = float ( input ("–î–∂–∞–ª–∞–ª-–ê–±–∞–¥ "))
#e = float ( input ("–ù–∞—Ä—ã–Ω "))
#f = float ( input ("–û—à "))
#g = float ( input ("–ë–∞—Ç–∫–µ–Ω "))
#
#abc =  ( a + b + c + d + e + f + g) / 7
#
#abc = round (abc, 1 )
#
#print (abc)
#
#
#
#regions = ['–ß—É–π', '–¢–∞–ª–∞—Å', '–´—Å—ã–∫-–ö—É–ª—å', '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥', '–ù–∞—Ä—ã–Ω', '–û—à', '–ë–∞—Ç–∫–µ–Ω']
#heat = {i: int(input(f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –æ–±–ª–∞—Å—Ç–∏ {i}: ')) for i in regions}
#
#print(round(sum(heat.values()) / len(heat),2))
#
#print("\n")
#
#
#import calendar
#
#print(calendar.TextCalendar().pryear(2023))
#
#
#print('\n')
#
#2
"–ó–∞–¥–∞–Ω–µ : –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ "

#ay = int(input("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: "))
#onth = int(input("–ú–µ—Å—è—Ü: "))
#
# ‚Å°‚Å£‚Å¢‚Å£–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É‚Å°
#
# date = (input("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:  ")) / 19-8 , 19.8 , 19/08 ...
# day = int(date[0:2:1])
# month = int(date[3:5:1])
#
#day = int(date[0:2:1])
#
#
#f (day >= 21 and day <=31 and month == 3) or (day <=20 and month == 4 ) :
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –û–≤–µ–Ω")
#
#lif ( day >= 21 and day <= 30 and month == 4 ) or (day <=21 and month == 5 ) :
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –¢–µ–ª–µ—Ü")
#
#lif ( day >= 22 and day <= 31 and month == 5) or (day <=21 and month == 6 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –ë–ª–∏–∑–Ω–µ—Ü—ã")
#
#lif ( day >= 22 and day <= 30 and month == 6) or (day <= 22 and month == 7 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –†–∞–∫")
#
#lif (day >= 23 and day <= 31 and month == 7) or (day <= 21 and month == 8 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –õ–µ–≤")
#
#lif (day >= 22 and day <= 31 and month == 8) or (day <= 23 and month ==9 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –î–µ–≤–∞")
#
#lif (day >= 24 and day <= 30 and month == 9) or (day <= 23 and month == 10 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –í–µ—Å—ã")
#
#lif (day >= 24 and day <= 31 and month == 10) or (day <= 22 and month == 11 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –°–∫–æ—Ä–ø–∏–æ–Ω")
#
#lif (day >= 23 and day <= 30 and month == 11) or (day <= 22 and month ==12 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –°—Ç—Ä–µ–ª–µ—Ü")
#
#lif (day >= 23 and day <= 31 and month == 12) or (day <= 20 and month == 1 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –ö–æ–∑–µ—Ä–æ–≥")
#
#lif (day >= 21 and day <= 31 and month == 1) or (day <= 19 and month == 2 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –í–æ–¥–æ–ª–µ–π")
#
#lif (day >= 20 and day <= 28 and month == 2) or (day <= 20 and month == 3 ):
#   print("–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: –†—ã–±—ã")
#
#lse:
#   print("ERROR BRO\n–ü—Ä–∏–º–µ—Ä >>\n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: '19'\n–ú–µ—Å—è—Ü: '8'\n–í—ã–≤–æ–¥–∏—Ç—å> –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: '–õ–µ–≤'")
#
#
#print('\n')


#"–°—á–µ—Ç—á–∏–∫ –±—É–∫–≤ (–≥–ª. –∏ —Å–æ–≥–ª.)"    #‚Å°‚Å¢‚Å£‚Å¢3 ‚Å°
#
#while True:
#
#    –≥–ª–∞—Å–Ω—ã–µ = 0
#    —Å–æ–≥–ª–∞—Å–Ω—ã–µ = 0
#
#    word = input("–í–≤–æ–¥: ")
#
#    for i in word:
#        k = i.lower()
#
#        if k == "a" or k == "e" or\
#           k == "i" or k == "o" or\
#           k == "u" or k == "y" or\
#           k == '–∞' or k == '–æ' or\
#           k == '—É' or k == '—ã' or\
#           k == '–µ' or k == '—è' or\
#           k == '—ç' or k == '—é' or\
#           k == '–∏' or k == '—ë':
#            –≥–ª–∞—Å–Ω—ã–µ += 1
#
#        else:
#            —Å–æ–≥–ª–∞—Å–Ω—ã–µ += 1
#    if word == 'stop':
#        print("Thanks bro")
#        break
#
#    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ "+str(len(word))+'\n'+ "–ì–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ %i\n–°–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ %i" % (–≥–ª–∞—Å–Ω—ã–µ, —Å–æ–≥–ª–∞—Å–Ω—ã–µ))
#    print("–ì–ª–∞—Å–Ω—ã—Ö: " + str(–≥–ª–∞—Å–Ω—ã–µ * 100 / len(word))+'%' + "\n" + "–°–æ–≥–ª–∞—Å–Ω—ã—Ö: " + str(—Å–æ–≥–ª–∞—Å–Ω—ã–µ * 100 / len(word)) +'%')
#
#
#
# 2 –≤–∞—Ä–∏–∞–Ω—Ç
#
#all = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—èqwertyuiopasdfghjklzxcvbnm'
#g ='aeiouy–∞—É–æ–µ—ë—è–∏—é—ç—ã'
#
#
#while True:
#
#    gl = 0
#    sogl = 0
#    s = 0
#
#    word= input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ")
#    word2=word
#
#    for i in word.lower():
#        if i in all:
#            s += 1
#            if  i in g:
#                gl+=1
#            else:
#                sogl+=1
#    if word == 'stop':
#        print("Thanks bruh")
#        break
#
#    print(f'–°–ª–æ–≤–æ:{word2}')
#    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤:{s}')
#    print(f'–°–æ–≥–ª–∞—Å–Ω—ã—Ö: {sogl}')
#    print(f'–ì–ª–∞—Å–Ω—ã—Ö: {gl}')
#    print(f'–ü—Ä–æ—Ü–µ–Ω—Ç –ì–ª–∞—Å–Ω—ã—Ö: {round(gl / s * 100, 2)}; –ü—Ä–æ—Ü–µ–Ω—Ç –°–æ–≥–ª–∞—Å–Ω—ã—Ö: {round(sogl / s * 100, 2)}')
#
#
#3 –≤–∞—Ä–∏–∞–Ω—Ç
#while 1 :
#    word = input('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ : ').lower()
#    if word =='stop':
#        break
#
#    elif word == '—Å—Ç–æ–ø':
#        break
#
#    else:
#        gl ='aeiouy–∞—É–æ–µ—ë—è–∏–π—é—ç—ã'
#        sl ='qwrtpsdfghjklzxcvbnm—Ü–∫–Ω–≥—à—â–∑—Ö—Ñ–≤–ø—Ä–ª–¥–∂—á—Å–º—Ç–±'
#
#        b = 0
#        c = 0
#
#        print(f'–°–ª–æ–≤–æ: {word}')
#
#        print('–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤:', len(word))
#
#        for i in word :
#            if i in gl:
#                b += 1
#        print('–ì–ª–∞—Å–Ω—ã—Ö:', int(b))
#
#        for u in word :
#            if u in sl:
#                c += 1
#        print('C–æ–≥–ª–∞—Å–Ω—ã—Ö:', int(c))
#
#        Sg = round(b / len(word) * 100, 2)
#        Ss = round(c / len(word) * 100, 2)
#
#        print(f'–ü—Ä–æ—Ü–µ–Ω—Ç –ì–ª–∞—Å–Ω—ã—Ö: {Sg}%')
#        print(f'–ü—Ä–æ—Ü–µ–Ω—Ç –°–æ–≥–ª–∞—Å–Ω—ã—Ö: {Ss}%')
#
# My version
#
# while 1 :
    # word = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ: ").lower()
#
    # if word == 'stop' or word == '—Å—Ç–æ–ø':
        # break
#
    # else:
        # gl = 'aeiouy–∞—É–æ–µ—ë—è–∏–π—é—ç—ã'
#
        # count_gl = 0
        # count_sogl = 0
#
        # print(f'–°–ª–æ–≤–æ: {word}')
        # print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤: {len(word)}')
#
        # for i in word :
            # if i in gl :
                # count_gl += 1
            # elif i not in gl:
                # count_sogl +=1
#
        # print(f'–ì–ª–∞—Å–Ω—ã—Ö: {int(count_gl)}')
        # print(f'–°–æ–≥–ª–∞—Å–Ω—ã—Ö: {int(count_sogl)}')
#
        # print(f'–ü—Ä–æ—Ü–µ–Ω—Ç –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ: {round(count_gl / len(word) * 100 , 2)}')
        # print(f'–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ: {round(count_sogl / len(word) * 100 , 2)}')

# version my students
# while True:
    # name = input('–°–ª–æ–≤–æ: ')
    # if name == 'stop' or name == '—Å—Ç–æ–ø':
        # print('exit...')
        # break
    # vowels = "–∞–µ–∏—É—ã–æ—ç—è—éaeiouy"
    # consonants = "–π—Ü–∫–Ω–≥—à—â–∑—Ö—Ñ–≤–ø—Ä–ª–¥–∂—á—Å–º—Ç–±qwrtpsdfghjklzxcvbnm"
    # counter1 = 0
    # counter2 = 0
    # for i in name.lower():
        # if i in vowels:
            # counter1 += 1
        # elif i in consonants:
            # counter2 += 1
        # else:
            # print('–¢–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ –∞–ª—Ñ–∞–≤–∏—Ç–∞')
    # summ = counter1 + counter2
    # percent1 = round(counter1 / summ*100, 2)
    # percent2 = round(counter2 / summ*100, 2)
    # print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤: {summ} ')
    # print(f'–ì–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤: {counter1}')
    # print(f'C–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤: {counter2}')
    # print(f'–ü—Ä–æ—Ü–µ–Ω—Ç –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤: {percent1} ')
    # print(f'–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤: {percent2} ')
#
#
# ‚Å°‚Å¢‚Å£‚Å¢4 ChatGPT‚Å°
#
#data_tuple = ('h', 6.13, 'C', 'e', 'T', True, 'k', 'e', 3, 'e', 1, 'g')#

#letters, numbers =[], []#

#for i in data_tuple:
#    if isinstance(i, str): # isinstance() - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω—ã–π –∫–ª–∞—Å—Å : —Ç–∏–ø–∞ —Ç–∞–º–æ–∂–Ω—è
#        letters.append(i)
#    else:
#        numbers.append(i)#

#numbers.remove(6.13)
#letters.append(numbers.pop(0))#
#

#numbers.insert(2, 2)#

#numbers = [x ** 2 for x in numbers]#

#numbers.sort()
#letters.reverse()#

#letters[1] = 'G'
#letters[-2] = 'c'#

##true= []
##true.append(letters.pop(0))      #–ø–µ—Ä–µ–º–µ—à–µ–Ω–∏–µ True –≤ –∫–æ–Ω–µ—Ü
##letters += true#

#letters = tuple(letters)
#numbers = tuple(numbers)#
#

#print("letters:",letters) # (True, 'G','e','e','k','T','e','c','h') or ('G','e','e','k','T','e','c','h',True)
#print("numbers:",numbers) # (1, 4, 9)#
#

##2 –≤–∞—Ä–∏–∞–Ω—Ç#

#data_tuple = ('h', 6.13, 'C', 'e', 'T', True, 'k', 'e', 3, 'e', 1, 'g')#

#letters, numbers =[], []#

#for i in data_tuple:
#    letters.append(i) if type(i) == str else numbers.append(i)#

#del numbers[0]
#letters.append(numbers.pop(0))#

#numbers.insert(2, 2)
#numbers = [x ** 2 for x in numbers]#

#numbers.sort()#

#letters[0], letters[-2] = letters[-2], letters[0]
#letters[1], letters[-3] = letters[-3], letters[1]   # –≥–æ–ª–æ–≤–∞ –±–æ–ª–∏—Ç –±**
#letters[3], letters[4] = letters[4], letters[3]#

#letters[0] ='G'
#letters[-3] ='c'#

#letters = tuple(letters)
#numbers = tuple(numbers)#

#print("letters:",letters)
#print("numbers:",numbers)#


# ‚Å°‚Å¢‚Å£‚Å¢5 ChatGPT Again...     ‚Äã‚Äå‚Äç‚Äåùóøùó≤ùó∫ùóÆùó∏ùó≤‚Äã

#
#data = ("O!", "Megacom", "0705", "Beeline", "0550", "0770", "Boiler", "0510", "Phonex", "0543")
##
## 1
#designations = []
#codes = []
##
## 2
#for d in data:
#    if d.isnumeric():
#        codes.append(d)
#    else:
#        designations.append(d)
##
## 3
#operators = {}
#i = 0
#while i < len(designations):
#    operator = designations[i]
#    code = codes[i]
#    if operator not in operators:
#        operators[operator] = set()
#    operators[operator].add(code)
#    i += 1
##
## 4
#del operators["Boiler"]
#del operators["Phonex"]
##
## 5
#operators["O!"].update({"0700", "0500"})
#operators["Megacom"].update({"0999", "0555"})
#operators["Beeline"].update({"0222", "0777"})
##
## 6
#for operator, code_set in operators.items():
#    print(operator, "-", code_set)
#
##
#studens_numbers = {
#    'argen': 1,
#    'baktybek': 2,
#    'vlad': 3,
#    'kutman': 4,
#    'tima': 5
#}
#
#def find_student(name):
#    if name in studens_numbers.keys():
#        return True
#    return False
#
#
#def add(name: str, numbers: int ):
#    #if name not in studens_numbers.keys():
#    if not find_student(name):
#        if numbers in range(1, 6):
#            studens_numbers[name] = numbers
#        else:
#            print('–û—Ç 1 –¥–æ 5 ')
#    else:
#        print(f'{name} —Ç–∞–∫–æ–µ –∏–º—è –µ—Å—Ç—å ')
#
#
#def delete(name):
#    #if name in studens_numbers.keys():
#    if find_student(name):
#        del studens_numbers[name]
#    else:
#        print(f'{name} —Ç–∞–∫–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç')
#
#
#def edit (name, new_name):
#   #if name in studens_numbers.keys():
#    if find_student(name):
#        studens_numbers[new_name] = studens_numbers.pop(name)
#
#
#def average_index ():
#    count = len(studens_numbers)
#    rate = sum(studens_numbers.values())
#    return rate / count
#
#
#while True :
#    print(studens_numbers)
#    command = input(f'1) add\n'
#                    f'2) edit\n'
#                    f'3) delete\n'
#                    f'4) average index\n')
#
#    if command == '1':
#        add(name=input('–Ω–æ–≤–æ–µ –∏–º—è: '), numbers= int(input('–æ—Ü–µ–Ω–∫–∞: ')))
#    elif command == '2':
#        edit(name=input('—Å—Ç–∞—Ä–æ–µ –∏–º—è: '), new_name=input('–Ω–æ–≤–æ–µ –∏–º—è: '))
#    elif command =='3':
#        delete(name=input('–∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: '))
#    elif command == '4':
#        print(average_index())
#    else:
#        print('—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞')
#
##edit('vlad', 'vladimir')
##delete('argen')
##add('tima',2)
#print(studens_numbers)




#6.1
#def first_word (word='Hello World'):
#
#    if not isinstance(word, str): #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É
#        return False
#
#    First_word = word.split() #–†–∞–∑–¥–µ–ª—è–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–Ω–∞ —Å–ª–æ–≤–∞
#
#    if First_word:
#        return First_word[0]
#
#    else:
#        return False
#
#print(first_word())
#print(first_word(input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ')))
#
#6.2
#def process (*numbers):
#    num = len(numbers)
#    suma = 0
#    for _ in numbers:
#        suma += 1
#    answer = sum(numbers) / suma
#    return int(answer)
#
#def average (*args):
#    return int(sum(args) / len(args))
#
#print(process(13,23,43,5653,46,4,5,67,4,3))
#print(average(13,23,43,5653,46,4,5,67,4,3))
#
#6.3
#def verify (password):
#    """–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä!)"""
#
#    if len(password) < 6 :
#        print(verify.__doc__)
#        return False
#    –µ—Å—Ç—å_—Ü–∏—Ñ—Ä—ã = False
#    –µ—Å—Ç—å_–±—É–∫–≤—ã = False
#    for i in password :
#       if i.isdigit():  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - —Ü–∏—Ñ—Ä–∞
#           –µ—Å—Ç—å_—Ü–∏—Ñ—Ä—ã = True
#       elif i.isalpha():  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª - –±—É–∫–≤–∞
#           –µ—Å—Ç—å_–±—É–∫–≤—ã = True
#
#    return –µ—Å—Ç—å_—Ü–∏—Ñ—Ä—ã and –µ—Å—Ç—å_–±—É–∫–≤—ã
#

#2 –≤–∞—Ä–∏–∞–Ω—Ç
#   if len(password) >= and not password.–µ—Å—Ç—å_—Ü–∏—Ñ—Ä—ã() and not password.–µ—Å—Ç—å_–±—É–∫–≤—ã():
#       return True
#   else:
#       return False
#
#print(verify(input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")))
#
#7
#
#ten = list(range(1, 11))
#
#evens = tuple(filter(lambda x : x % 2 ==0, ten))
#evens2 = list(map(lambda i : i **2 , evens))
#
#print(evens2)
#
#
#while 1:
#
#    index = input('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å: ')
#
#    if index.lower() in ['exit', '–≤—ã—Ö–æ–¥']:
#       break
#
#    try:
#        index_use = int(index)
#        print(ten[index_use])
#        continue
#
#    except IndexError:
#        print('–ò–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –æ—Ç 0 –¥–æ 9')
#        continue
#
#    except ValueError:
#        print('–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏, –≤–≤–µ–¥–∏—Ç–µ [exit] –∏–ª–∏ [–≤—ã—Ö–æ–¥]')
#        continue
#
#    except:
#        print('Oops, error')
#        continue
#
# 8
#
#import random
#
#def —É–≥–∞–¥–∞–π_—á–∏—Å–ª–æ():
#    target_number = random.randint(1, 100)
#    attempts = []
#
#    while True:
#        attempt = int(input('–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ: '))
#        attempts.append(attempt)
#
#        if attempt == target_number:
#            print('–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!')
#            —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(attempts, target_number)
#            break
#        elif attempt < target_number:
#            print('–ë–æ–ª—å—à–µ')
#        else:
#            print('–ú–µ–Ω—å—à–µ')
#
#def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_—Ä–µ–∑—É–ª—å—Ç–∞—Ç(attempts, target_number):
#    att_count = len(attempts)
#    —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã = {
#        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–ø—ã—Ç–æ–∫': att_count,
#        '—Å–ø–∏—Å–æ–∫_–ø–æ–ø—ã—Ç–æ–∫': attempts,
#        '–∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ_—á–∏—Å–ª–æ': target_number
#    }
#
#    with open('results.txt', 'w', encoding='utf-8') as file:
#        for key, value in —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.items():
#            file.write(f'{key}: {value}\n')
#
### –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
#—É–≥–∞–¥–∞–π_—á–∏—Å–ª–æ()
#
#
#def —É–≥–∞–¥–∞–π_—á–∏—Å–ª–æ():
#  –º–∏–Ω_—á = 1
#  –º–∞–∫—Å_—á = 100
#  at = 0
#
#  while True:
#      at += 1
#      num = (–º–∏–Ω_—á + –º–∞–∫—Å_—á) // 2
#      print(f'–í–∞—à–µ —á–∏—Å–ª–æ: {num}')
#
#      –æ—Ç–≤–µ—Ç = input('–í–≤–µ–¥–∏—Ç–µ "–±–æ–ª—å—à–µ", "–º–µ–Ω—å—à–µ" –∏–ª–∏ "–¥–∞": ')
#
#      if –æ—Ç–≤–µ—Ç.lower() == '–±–æ–ª—å—à–µ':
#          –º–∏–Ω_—á = num + 1
#      elif –æ—Ç–≤–µ—Ç.lower() == '–º–µ–Ω—å—à–µ':
#          –º–∞–∫—Å_—á = num - 1
#      elif –æ—Ç–≤–µ—Ç.lower() == '–¥–∞':
#          —Ä–µ–∑—É–ª—å—Ç–∞—Ç(at, num)
#          break
#      else:
#          print('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
#
#def —Ä–µ–∑—É–ª—å—Ç–∞—Ç(–ø–æ–ø, num):
#  —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã = {
#      '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫': at,
#      '–í–∞—à–µ —á–∏—Å–ª–æ': num
#  }
#
#  with open('results.txt', 'w', encoding='utf-8') as file:
#      for key, value in —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.items():
#          file.write(f'{key} - {value}\n')
#
#  print('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ "results.txt".')
#
#
#—É–≥–∞–¥–∞–π_—á–∏—Å–ª–æ()
#

#OOP


##H/w
#
#class Car:
#    def __init__(self, title, model, weight, hp, nm, max_speed, color):
#        self.title = title
#        self.model = model
#        self.weight = weight
#        self.hp = hp
#        self.nm = nm
#        self.max_speed = max_speed
#        self.color = color
#
#
#    def start_engine(self):
#        print(f"{self.title} {self.model} engine started!")
#
#    def stop_engine(self):
#        print(f"{self.title} {self.model} engine stopped!")
#
#    def info(self):
#        print(f"Title: {self.title}")
#        print(f"Model: {self.model}")
#        print(f"Weight: {self.weight} kg")
#        print(f"Horsepower: {self.hp} hp")
#        print(f"Torque: {self.nm} Nm")
#        print(f"Max Speed: {self.max_speed} km/h")
#        print(f"Color: {self.color}")
#
#
## –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ Car
#bmw = Car("BMW", "X5", 2000, 250, 350, 250, "Blue")
#mercedes = Car("Mercedes", "C-Class", 1800, 200, 280, 220, "Silver")
#
## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
#bmw.start_engine()
#mercedes.start_engine()
#bmw.info()
#mercedes.info()
#bmw.stop_engine()
#mercedes.stop_engine()
#
#
#
#class Company :
#
#    def __init__(self, company_bank, company_name):
#        self.company_bank = company_bank
#        self.company_name = company_name
#
#class Person(Company):
#
#    def __init__(self, company_bank, company_name, first_name, last_name, salary):
#        super().__init__(company_bank, company_name)
#        self.first_name = first_name
#        self.last_name = last_name
#        self.salary = salary
#
#    def get_salary(self):
#        if self.company_bank < self.salary :
#            print(f'–£ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
#
#        else:
#            self.company_bank -= self.salary
#            print(f'–ó–∞—Ä–ø–ª–∞—Ç–∞ {self.first_name} {self.last_name} –≤—ã–ø–ª–∞—á–µ–Ω–æ!')
#
#    def person_info(self):
#        print(f'–ò–º—è: {self.first_name}')
#        print(f'–§–∞–º–∏–ª–∏—è: {self.last_name}')
#        print(f'–ó–∞—Ä–ø–ª–∞—Ç–∞: {self.salary}')
#
#my_company = Company(90000, '–ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è')
#
#employee1 = Person(my_company.company_bank, my_company.company_name, "–°–∞—à–∞", "–ü–µ—Ç—Ä–æ–≤", 60000)
#employee2 = Person(my_company.company_bank, my_company.company_name, "–ù–∞—Ç–∞—à–∞", "–ò–≤–∞–Ω–æ–≤–∞", 40000)
#
#employee1.get_salary()
#employee2.get_salary()
#print()
#employee1.person_info()
#print()
#employee2.person_info()
#
#
#
#class Fraction:
#    def __init__(self, numerator, denominator):
#        self.numerator = numerator
#        self.denominator = denominator
#
#    def __add__(self, other):
#        common_denominator = self.denominator * other.denominator
#        new_numerator = (self.numerator * other.denominator) + (other.numerator * self.denominator)
#        return Fraction(new_numerator, common_denominator)
#
#    def __sub__(self, other):
#        common_denominator = self.denominator * other.denominator
#        new_numerator = (self.numerator * other.denominator) - (other.numerator * self.denominator)
#        return Fraction(new_numerator, common_denominator)
#
#    def __mul__(self, other):
#        new_numerator = self.numerator * other.numerator
#        new_denominator = self.denominator * other.denominator
#        return Fraction(new_numerator, new_denominator)
#
#    def __floordiv__(self, other):
#        new_numerator = self.numerator * other.denominator
#        new_denominator = self.denominator * other.numerator
#        return Fraction(new_numerator, new_denominator)
#
#    def simplify(self):
#        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –¥—Ä–æ–±–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
#        com = self.gcd(self.numerator, self.denominator)
#        self.numerator //= com
#        self.denominator //= com
#
#    @staticmethod
#    def gcd(a, b):
#        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –æ–±—â–µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª—è
#        while b:
#            a, b = b, a % b
#        return a
#
## –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
#fraction1 = Fraction(3, 4)
#fraction2 = Fraction(1, 2)
#
#
## –°–ª–æ–∂–µ–Ω–∏–µ
#result_add = fraction1 + fraction2
#result_add.simplify()
#print(result_add.numerator, '/', result_add.denominator)  # –í—ã–≤–µ–¥–µ—Ç: 5 / 4
#
## –í—ã—á–∏—Ç–∞–Ω–∏–µ
#result_sub = fraction1 - fraction2
#print(result_sub.numerator, '/', result_sub.denominator)  # –í—ã–≤–µ–¥–µ—Ç: 1 / 4
#
## –£–º–Ω–æ–∂–µ–Ω–∏–µ
#result_mul = fraction1 * fraction2
#print(result_mul.numerator, '/', result_mul.denominator)  # –í—ã–≤–µ–¥–µ—Ç: 3 / 8
#
## –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
#result_floordiv = fraction1 // fraction2
#print(result_floordiv.numerator, '/', result_floordiv.denominator)  # –í—ã–≤–µ–¥–µ—Ç: 3 / 2
#
#
#
#class A:
#
#    def __init__(self, a, b):
#        self.a = a
#        self.b = b
#
#    def __add__(self, other):
#        c = (self.a * other.b ) + (self.b * other.a)
#        d = (self.b * other.b )
#        return A(c, d)
#
#    def __sub__(self, other):
#        c = (self.a * other.b ) - (self.b * other.a)
#        d = (self.b * other.b )
#        return A(c, d)
#
#    def __mul__ (self, other):
#        c = self.a * other.a
#        d = self.b * other.b
#        return A(c, d)
#
#
#
#    def simplify(self):
#    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –¥—Ä–æ–±–∏ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
#        f = self.gcd(self.a, self.b)
#        self.a //= f
#        self.b //= f
#
#    @staticmethod
#    def gcd(a, b):
#        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –æ–±—â–µ–≥–æ –¥–µ–ª–∏—Ç–µ–ª—è
#        while b:
#            a, b = b, a % b
#        return a
#
#
#
#a1 = A(3, 4)
#a2 = A(1, 2)
#result = a1 * a2
##result.simplify()
#print(result.a, '/', result.b)
#

# –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
# w - write
# a - add
# x - –Ω–µ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â.
# r - read

# file = open('new_file.txt', 'w', encoding='utf-8') # –¢–æ–ª—å–∫–æ —Å  —Ä—É—Å—Å–∫–∏–º
# file.write('–ë–∏—à–∫–µ–∫, –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω')
# file.close()
#
#
# with open('new_file.txt', 'a', encoding='utf-8') as file:
    # file.write('–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞')
#
# with open('n_file.txt', 'x') as file:
    # file.write('4444')
#
#
# with open('new_file.txt', 'w', encoding='utf-8') as file:
    # file.write('–ì–∏–º–Ω –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞')
#
#from time import sleep
#
#with open('new_file.txt', 'r', encoding='utf-8') as file:
##    print(file.read())
##    print(file.readlines()[0])
#    for i in file.readlines():
#        sleep()
#        print(i, end='')
#
#print(type(file))

#class Car:
#
#    def __init__(self, model, engine):
#       self.model = model
#       self.engine = engine
#
#    def star_engine(self):
#        print(f'Engine on {self.model} starded')
#
#    def stop_engine(self):
#        print(f'Engine on {self.model} stoped')
#
#
#""" instance Car """
#supra = Car('MK4', '2jz')
#supra.star_engine()
#
#bmw = Car('E38', 'v10' )
#bmw.star_engine()
#

#print(supra.model, supra.engine, supra.hp, supra.nm )

#‚Å°‚Å£‚Å¢‚Å£1 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å "Student" (–°—Ç—É–¥–µ–Ω—Ç), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã:‚Å°
# ‚Å°‚Å£‚Å¢‚Å£–∏–º—è (name), –≤–æ–∑—Ä–∞—Å—Ç (age) –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª (gpa).‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£2 –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ "init", –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å
# ‚Å°‚Å£‚Å¢‚Å£–í–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ "name", "age" –∏ "gpa" –Ω–∞ –æ—Å–Ω–æ–≤–µ
#
#‚Å°‚Å£‚Å¢‚Å£3 –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥ "study" (—É—á–∏—Ç—å—Å—è), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å—Ç—É
# ‚Å°‚Å£‚Å¢‚Å£–∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º —É—á–∏—Ç—Å—è –∏ –µ–≥–æ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª.‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£4 –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥ "graduate" (–∑–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
#‚Å°‚Å£‚Å¢‚Å£ —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –æ–∫–æ–Ω—á–∏–ª –æ–±—É—á–µ–Ω–∏–µ.‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£5 –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ (—ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞) "Student" —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, –≤–æ–∑—Ä–∞—Å—Ç–æ–º–∏
#
#‚Å°‚Å£‚Å¢‚Å£6 –í—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ "study" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º,‚Å°
# ‚Å°‚Å£‚Å¢‚Å£—á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç —É—á–∏—Ç—Å—è –∏ –µ–≥–æ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª.‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£7 –í—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ "graduate" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º,‚Å°
# ‚Å°‚Å£‚Å¢‚Å£—á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç –æ–∫–æ–Ω—á–∏–ª –æ–±—É—á–µ–Ω–∏–µ.‚Å°
#
#class student:
#    def __init__(self, name, age, gpa):
#        self.name = name
#        self.age = age
#        self.gpa = gpa
#
#    def study (self):
#        print(f'C—Ç—É–¥–µ–Ω—Ç: {self.name}, –í–æ–∑—Ä–∞—Å—Ç: {self.age}, Gpa: {self.gpa} ')
#
#    def graduate (self):
#        print(f'–°—Ç—É–¥–µ–Ω—Ç: {self.name} –æ–∫–æ–Ω—á–∏–ª –æ–±—É—á–µ–Ω–∏–µ')
#
#
#goodboy = student('G.Kevin', 18, 4.8)
#goodboy.study()
#
#badboy = student('F.Brayn', 19, 3.7)
#badboy.graduate()
#
#
#‚Å°‚Å£‚Å¢‚Å£1 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å "Person" (–ß–µ–ª–æ–≤–µ–∫), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã: ‚Å°
#‚Å°‚Å£‚Å¢‚Å£ –∏–º—è (name), –≤–æ–∑—Ä–∞—Å—Ç (age) –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é (profession).‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£2 –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ "init", –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å
# ‚Å°‚Å£‚Å¢‚Å£–í–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ "name", "age" –∏ "profession" –Ω–∞
#
#‚Å°‚Å£‚Å¢‚Å£3 –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥ "introduce" (–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ‚Å°
#‚Å°‚Å£‚Å¢‚Å£ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–µ–ª–æ–≤–µ–∫–µ: "–ú–µ–Ω—è –∑–æ–≤—É—Ç [–∏–º—è]. –ú–Ω–µ [–≤–æ–∑—Ä–∞—Å—Ç] –ª–µ—Ç –∏ —è —Ä–∞–±–æ—Ç–∞—é [–ø—Ä–æ—Ñ–µ—Å—Å–∏
#
#‚Å°‚Å£‚Å¢‚Å£4 –°–æ–∑–¥–∞–π—Ç–µ –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ (—ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞) "Person" —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏, –≤–æ–∑—Ä–∞—Å—Ç–∞–º–∏ –∏
#
#‚Å°‚Å£‚Å¢‚Å£5 –í—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ "introduce" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞
#‚Å°‚Å£‚Å¢‚Å£ ‚Å°‚Å£‚Å¢‚Å£–æ –∫–∞–∂–¥–æ–º —á–µ–ª–æ–≤–µ–∫–µ.‚Å°
#
#class person:
#    def __init__(self, name, age, profession):
#        self.name = name
#        self.age = age
#        self.profession = profession
#
#    def introduce (self):
#        print(f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {self.name}. –ú–Ω–µ {self.age} –ª–µ—Ç, –º–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è {self.profess
#
#A = person('–°–µ—Ä–≥–µ–π', 38, '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫')
#A.introduce()
#
#B = person('–û–ª–µ–≥', 25, '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç')
#B.introduce()
#
#C = person('–ê–Ω–Ω–∞', 27, '–£—á–∏—Ç–µ–ª—å')
#C.introduce()
#
#d_name = input('–ò–º—è: ')
#d_age = input('–í–æ–∑—Ä–∞—Å—Ç: ')
#d_profession = input('–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ')
#
#D = person(d_name, d_age, d_profession)
#D.introduce()
#

#‚Å°‚Å£‚Å¢‚Å£1 –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å "BankAccount" (–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ç—Ä
#‚Å°‚Å£‚Å¢‚Å£ –∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (balance).‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£2 –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ "init", –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å
# ‚Å°‚Å£‚Å¢‚Å£–í–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ "owner" –∏ "balance" –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ
#
#‚Å°‚Å£‚Å¢‚Å£3 –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥ "deposit" (–≤–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—É–º–º—É –∏ —É–≤–µ–ª–∏—á
#
#‚Å°‚Å£‚Å¢‚Å£4 –°–æ–∑–¥–∞–π—Ç–µ –º–µ—Ç–æ–¥ "withdraw" (—Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—É–º–º—É –∏ —É–º–µ–Ω—å—à–∞
#‚Å°‚Å£‚Å¢‚Å£ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£5 –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç (—ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞) "BankAccount" —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—á–µ—Ç
#
#‚Å°‚Å£‚Å¢‚Å£6 –í—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ "deposit" –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ "BankAccount" –∏ –≤–Ω–µ—Å–∏—Ç–µ –Ω–∞ —Å—á–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é
#
#‚Å°‚Å£‚Å¢‚Å£7 –í—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ "withdraw" –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ "BankAccount" –∏ —Å–Ω–∏–º–∏—Ç–µ —Å—É–º–º—É —Å–æ —Å—á–µ—Ç–∞. –£–±–µ
# ‚Å°‚Å£‚Å¢‚Å£—á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.‚Å°
#
#‚Å°‚Å£‚Å¢‚Å£8 –í—ã–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –æ–±—ä–µ–∫—Ç–∞ "BankAccount".
#
#class bankaccount:
#    def __init__(self, owner, balance):
#        self.owner = owner
#        self.balance = balance
#
#    def deposit (self):
#        a = int(input('–í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç: '))
#        print(f'–í–∞—à –¥–µ–ø–æ–∑–∏—Ç: {a * 5}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {self.balance - a }')
#
#    def withdraw (self):
#        b = int(input('–°–Ω—è—Ç –¥–µ–Ω–≥–∏: '))
#        print(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {self.balance - b}')
#
#
#owner1 = bankaccount('Taylor', 250000)
#owner1.deposit()
#owner1.withdraw()
#
#class BankAccount:
#    def __init__(self, owner, balance):
#        self.owner = owner
#        self.balance = balance
#
#    def deposit(self):
#        amount = float(input('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞: '))
#        self.balance += amount
#        print(f'–î–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.ba
#
#    def withdraw(self):
#        amount = float(input('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è: '))
#        if amount <= self.balance:
#            self.balance -= amount
#            print(f'–í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ {amount}. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.balance}')
#        else:
#            print('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.')
#
#a = str(input('name: '))
#b = int(input('balance: '))
#owner1 = BankAccount(a, b )
#owner1 = BankAccount('Taylor', 250000)
#owner1.deposit()
#owner1.withdraw()
#
#class Transport:
#    def __init__(self,
#                 title, model, engine,max_speed, speed
#                 ):
#        self.title = title
#        self.model = model
#        self.engine = engine
#        self.max_speed = max_speed
#        self.speed = speed
#
#    def start_engine(self):
#        print(f'Engine on {self.title} {self.model} started!')
#
#
#class Car(Transport):
#
#    current_speed = 0
#
#    def __init__(self, title, model, engine, max_speed, speed, color):
#        super().__init__(title, model, engine, max_speed, speed)
#        self.color = color
#
#    def stop_engine(self):
#        print(f'its stop engine in Car')
#
#    def gas (self):
#        if self.current_speed + self.speed >= self.max_speed:
#            print('CHECK on!')
#        else:
#            self.current_speed += self.speed
#            print(self.current_speed)
#
#    def stop(self):
#        if self.current_speed - self.speed > 0 :
#            self.current_speed -= self.speed
#        else:
#            self.current_speed = 0
#        print(self.current_speed)
#
#
#class Airplane(Transport):
#    def stop_engine(self):
#        print(f'its stop engine in Airplane')
#
#
#bmw = Car('BMW', 'e36', 'v10', 330, 60, 'black')
#
##bmw.start_engine()
##bmw.stop_engine
#
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#
#bmw.stop()
#bmw.stop()
#
#boeing = Airplane('Boeing', '77', 'v100', 3600, 600)
#
#boeing.start_engine()
#boeing.stop_engine()

#
#
#class Transport:
#
#    def __init__(self, title, engine, color, model, tachometer):
#        self.title = title
#        self.engine = engine
#        self.color = color
#        self.model = model
#        self.tachometer = tachometer
#
#    def star_engine (self):
#        print(f'On {self.title} {self.model} engine started!')
#
#    def stop_engine(self):
#        print(f'On {self.title} {self.model} engine stop!')
#
#    def car_check (self):
#        if self.tachometer < 1 :
#            print("Check On!")
#
#        else:
#            print('Check off!')
#
#
#class Car(Transport):
#
#    def __init__(self, title, engine, color, model, tachometer, max_speed):
#        super().__init__(title, engine, color, model, tachometer)
#        self.max_speed = max_speed
#
#
#class Tesla(Car):
#    pass
#
#tesla = Tesla(
#    'Tesla',
#    'electra car',
#    'black',
#    'plaid',
#    1,
#    260
#)
#
#print(tesla.max_speed)

#
#tesla = Car(
#    'Tesla',
#    'electra car',
#    'black',
#    'plaid',
#    1,
#    250
#)
#
#tesla.star_engine()
#tesla.car_check()
#
#
#class Animals:
#
#    def __init__(self, name, voice_text):
#        self.name = name
#        self.voice_text = voice_text
#
#    def voice(self):
#        print(f'{self.name} {self.voice_text}')
#
#
#class Dog(Animals):
#    pass
#
#
#class Cat(Animals):
#
#    def voice(self):
#        print(f'I am cat and {self.voice_text}')
#
#    def go_toilet(self):
#        print('I am going pipi')
#
#
#
#sharik = Dog('Sharik', 'GAF GAF')
#murka = Cat('Murka', 'MEOW MEOW')
#
#sharik.voice()
#murka.voice()
#
#
#
#class Human:
#
#    def happy(self):
#        print("Oh I am happy")
#

#lass Animals2:
#
#   def happy(self):
#       print("I am happy animal!")

#
#class Car:
#
#    def __init__(self, title, model, max_speed, speed):
#        self.title = title
#        self.model = model
#        self.max_speed = max_speed
#        self.speed = speed
#        self._current_speed = 0
#
#    def _get_current_speed(self):
#        print(f'Current speed = {self._current_speed}')
#
#
#    def start_engine(self):
#        print(f'{self.title} {self.model} engine started!')
#
#    def gas(self):
#        if self._current_speed + self.speed < self.max_speed:
#            self._current_speed += self.speed
#            self._get_current_speed()
#        else:
#            print("CHECK ON!")
#
#    def stop (self):
#        if self._current_speed - self.speed > 0 :
#            self._current_speed -= self.speed
#            self._get_current_speed()
#        else:
#            print("CHECK ON!")
#
#
#bmw = Car('BMW', "b7", 350, 20)
#bmw.start_engine()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#bmw.gas()
#
#bmw.stop()
#
#
#class A:
#    def __init__(self, num):
#        self.num = num
#
#    def __add__ (self, other):
#        print("Dunder method __add__")
#        self.num += other
#        return self.num
#
#    def __mul__ (self, other):
#        print("Dunder method __mul__")
#        self.num *= other
#        return self.num
#
#    def __sub__ (self, other):
#        print("Dunder method __sub__")
#        self.num -= other
#        return self.num
#
#    def __floordiv__(self, other ):
#        print("Dunder method __floordiv__")
#        self.num //= other
#        return self.num
#
#    def __truediv__(self, other):
#        print("Dunder method __truediv__")
#        self.num /= other
#        return self.num
#
#a1 = A(20)
#print(a1 / 2)
#
#class A:
#
#    def __init__(self, text):
#        self.text = text
#
#    def get_text (self):
#        print(self.text)
#
#class B:
#
#    def test(self):
#        pass
#
#    #Mix class
#
#class C(A, B):
#    pass
#
#
#c1 = C()
#c1.get_text()
#c1.test()
