# ‚Å°‚Å£‚Å£‚Å°‚Å¢‚Å¢‚Å£‚Å°‚Å£‚Å¢‚Å°‚Å¢‚Å£‚Å£‚Äã‚Äå‚Äç‚Äå‚Å°‚Å¢‚Å¢‚Å¢‚Å°‚Å£‚Å¢‚Å£‚Å°‚Å¢‚Å£‚Å¢ùóßùó≤ùòÄùòÅ ‚Å°‚Å°‚Å°‚Äã‚Å°‚Å°‚Å°‚Å°


#
#resorts = ['–°–æ—á–∏', '–∫—É—Ä–æ—Ä—Ç—ã –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –ö—Ä–∞—è', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞—Ä–µ–ª–∏—é']
#def choose_vacation_place(resorts):
#    for resort in resorts:
#        if resort == '–°–æ—á–∏':
#            return resort
#resort = choose_vacation_place(resorts)
#print('–ü–æ–µ—Ö–∞–ª–∏ –≤ ' + resort)
#

#
#import random
#
#lower = "abcdefghijklmnopqrstuvwxyz"
#upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#numbers = "0123456789"
#symbols = "[}{}()*;/,._-"
#
#all = lower + upper + numbers + symbols
#lenght = 16
#password = "".join(random.sample(all,lenght))
#
#print(password)
#
#–û–±—ä—è–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é rooms_equal() —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ room_size –∏ room_list
#def rooms_equal(room_size, room_list):
# –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±—ä—è–≤–∏–ª–∏
#   count = 0
#
#   for room in room_list:
#       if room == room_size:
#           count = count + 1
#
#   print('–ö–æ–º–Ω–∞—Ç –ø–ª–æ—â–∞–¥—å—é', room_size, '–∫–≤.–º:', count)
#
#
# –°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –∏ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –≤ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
#flat = [
#   5.55, 22.19, 7.78, 26.86, 5.55,
#   29.84, 22.19, 5.55, 16.85, 4.52
#
#
#hut = [9.2, 3.5, 8.1, 2.3, 9.2, 4.2, 6.9]
#
#rooms_equal(5.55, flat)
# –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–∏–Ω –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ rooms_equal()
# –ü–µ—Ä–µ–¥–∞–π—Ç–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏—Å–∫–æ–º—É—é –ø–ª–æ—â–∞–¥—å - 9.2 –∫–≤.–º –∏ —Å–ø–∏—Å–æ–∫ hut
#rooms_equal(9.2, hut)
#
#def number_of_occurrences(char, string):
#    # –ó–¥–µ—Å—å –æ–±—ä—è–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é count, —Ä–∞–≤–Ω—É—é –Ω—É–ª—é.
#    # –û–Ω–∞ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π
#    count = 0
#    for letter in string:
#        # –ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ: —Å—Ä–∞–≤–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ letter –∏ char
#        # –ò –µ—Å–ª–∏ letter —Ä–∞–≤–Ω–∞ char - —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å—á—ë—Ç—á–∏–∫ count –Ω–∞ 1
#        if letter == char:
#            count += 1
#
#    # –ü–µ—á–∞—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:
#    print('–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:', string)
#    # –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á—ë—Ç–æ–≤:
#    print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π —Å–∏–º–≤–æ–ª–∞', char, '—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:', count)
#
#
## –ö–æ–¥ –Ω–∏–∂–µ –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ
#phrase = '–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ï—Å–ª–∏ –±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ, –≤–∞—Å –±—ã —É–≤–æ–ª–∏–ª–∏.'
#
## –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é number_of_occurrences(), —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—Å—á–∏—Ç–∞–ª–∞,
## —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤–æ —Ñ—Ä–∞–∑–µ phrase –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±—É–∫–≤–∞ '–µ'
#number_of_occurrences('–µ', phrase)
#
#cities = [
#    '–í–æ–ª–æ–≥–¥–∞',
#    '–ß–µ–±–æ–∫—Å–∞—Ä—ã',
#    '–¢–æ–ª—å—è—Ç—Ç–∏',
#    '–ú–æ—Å–∫–≤–∞',
#    '–ë—Ä–µ–º–µ–Ω',
#    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
#    '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫',
#    '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#    '–í–æ–ª–æ–≥–¥–∞',
#    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
#    '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
#    '–ú–æ—Å–∫–≤–∞',
#    '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'
#]
#
#unique_cities = set(cities)
#
#for i in unique_cities:
#    print(f'- {i}')
#
#
#
#d = "I" "love" "arrays they are my favorite"
#a = d.find('love')
#print(a)
#
#
#
#hello = {
#    'english': 'Welcome',
#    'czech': 'Vitejte',
#    'danish': 'Velkomst',
#    'dutch': 'Welkom',
#    'estonian': 'Tere tulemast',
#    'finnish': 'Tervetuloa',
#    'flemish': 'Welgekomen',
#    'french': 'Bienvenue',
#    'german': 'Willkommen',
#    'irish': 'Failte',
#    'italian': 'Benvenuto',
#    'latvian': 'Gaidits',
#    'lithuanian': 'Laukiamas',
#    'polish': 'Witamy',
#    'spanish': 'Bienvenido',
#    'swedish': 'Valkommen',
#    'welsh': 'Croeso'
#}
#
#def greet(language):
#    for language in hello:
#        if language == hello():
#            return language.values()
#        else:
#            return 'Welcome'
#
#greet('german')
#
#‚Å°‚Å¢‚Å£‚Å¢"""‚Å°
#   ‚Å°‚Å¢‚Å£‚Å¢ ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†õ‚†õ‚†õ‚†ã‚†â‚†à‚†â‚†â‚†â‚†â‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚Å°
# ‚Å°‚Å¢‚Å£‚Å¢   ‚£ø‚£ø‚£ø‚£ø‚°è‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚Å°
#   ‚Å°‚Å¢‚Å£‚Å¢ ‚£ø‚£ø‚£ø‚¢è‚£¥‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚Å°
#  ‚Å°‚Å¢‚Å£‚Å¢  ‚£ø‚£ø‚£ü‚£æ‚£ø‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚¢¢‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚Å°
#  ‚Å°‚Å¢‚Å£‚Å¢  ‚£ø‚£ø‚£ø‚£ø‚£ü‚†Ä‚°¥‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚Å°
# ‚Å°‚Å¢‚Å£‚Å¢   ‚£ø‚£ø‚£ø‚†ü‚†ª‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∂‚¢¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚Å°
# ‚Å°‚Å¢‚Å£‚Å¢   ‚£ø‚£Å‚°Ä‚†Ä‚†Ä‚¢∞‚¢†‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚£¥‚£∂‚£ø‚°Ñ‚£ø‚Å°
#  ‚Å°‚Å¢‚Å£‚Å¢  ‚£ø‚°ã‚†Ä‚†Ä‚†Ä‚†é‚¢∏‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ó‚¢ò‚£ø‚£ü‚†õ‚†ø‚£º‚Å°
#   ‚Å°‚Å¢‚Å£‚Å¢ ‚£ø‚£ø‚†ã‚¢Ä‚°å‚¢∞‚£ø‚°ø‚¢ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚¢∏‚£ø‚£ø‚£ß‚¢Ä‚£º‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£∑‚¢ª‚†Ñ‚†ò‚†õ‚†ã‚†õ‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ß‚†à‚†â‚†ô‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#   ‚Å°‚Å¢‚Å£‚Å¢ ‚£ø‚£ø‚£ß‚†Ä‚†à‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢É‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚°ø‚†Ä‚†¥‚¢ó‚£†‚£§‚£¥‚°∂‚†∂‚†ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°∏‚†Ä‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚°Ä‚¢†‚£æ‚£ø‚†è‚†Ä‚††‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†â‚†Ä‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚£ß‚†à‚¢π‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†à‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#  ‚Å°‚Å¢‚Å£‚Å¢  ‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ñ‚£Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#‚Å°‚Å¢‚Å£‚Å¢    ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#  ‚Å°‚Å¢‚Å£‚Å¢  ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚°ü‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#   ‚Å°‚Å¢‚Å£‚Å¢ ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Å‚†Ä‚†Ä‚†π‚£ø‚†É‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ê‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚†â‚†â‚†Å‚†Ä‚¢ª‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†à‚£ø‚£ø‚°ø‚†â‚†õ‚†õ‚†õ‚†â‚†â‚Å°
#    ‚Å°‚Å¢‚Å£‚Å¢‚£ø‚°ø‚†ã‚†Å‚†Ä‚†Ä‚¢Ä‚£Ä‚£†‚°¥‚£∏‚£ø‚£á‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ø‚†Ñ‚†ô‚†õ‚†Ä‚£Ä‚£†‚£§‚£§‚†Ñ‚Å°
#
#    ‚Å°‚Å¢‚Å£‚Å¢"""‚Å°
#



print(-2+4)



#
#a = '4 5'.split(' ')
#
#print(int(a[0]) + int(a[1]))

#
#def first_word(text: str) -> str:
#    # your code here
#    return text.split()[0]   #–≤—ã–≤–æ–¥–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
#
#
##print("Example:")
#print(first_word("Hello world"))

#def first_word(text: str) -> str:
#    # your code here
#    return text.split(' ')
##
##
##print("Example:")
#print(first_word("HelloWorld"))
#
#
#import re
#def solution(s):
#    return re.sub('([A-Z])', r' \1', s)
#
#
#numbers = [1, 1, 1, 2, 2, 2, 3, 3, 3]
#
#a = {num for num in numbers}
#
#print(a)
#
#
#a = print

#a( "Hello")


#quote_1 = '–†–∞–±–æ—Ç–∞–µ—Ç? –ù–µ —Ç—Ä–æ–≥–∞–π'
#quote_2 = '–ï—Å–ª–∏ —Ç–≤–æ–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π –∫–æ–¥'
#quote_3 = '–õ–µ–Ω—å - –≥–ª–∞–≤–Ω–æ–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞'
#
#def penult_word(message):
#    word_list = message.split()
#
#    return word_list[-3]
#
## –í—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ, –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –∏—Ö!
## –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é penult_word —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º quote_1 –∏ –ø–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë —Ä–∞–±–æ—Ç—ã.
#
#print(penult_word(quote_1))
#
## –¢–æ –∂–µ, –Ω–æ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º quote_2.
#print(penult_word(quote_2))
##
## –¢–æ –∂–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º quote_3.
#print(penult_word(quote_3))
#

#def check_query(query):
#
#    e = query.split(',')
#
#    if "–ê–Ω—Ñ–∏—Å–∞" in e:
#        return '–∑–∞–ø—Ä–æ—Å –∫ –ê–Ω—Ñ–∏—Å–µ'
#    else:
#        return '–∑–∞–ø—Ä–æ—Å –∫ –∫–æ–º—É-—Ç–æ –µ—â—ë'
#
#
#queries = [
#    '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
#    '–ê–Ω–¥—Ä–µ–π, –Ω—É –≥–¥–µ —Ç—ã –±—ã–ª?',
#    '–ê–Ω–¥—Ä–µ–π, –Ω—É –æ–±–Ω–∏–º–∏ –º–µ–Ω—è —Å–∫–æ—Ä–µ–π!',
#    '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'
#]
#
#for q in queries:
#
#    result = check_query(q)
#
#    print(q, '-', result)
#
#
#def check_query(query):
#    elements  = query.split(', ')
#    # –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
#    return elements[1]
#
## –î–∞–ª—å—à–µ —Å–ª–µ–¥—É–µ—Ç –∫–æ–¥, –≤—ã–∑—ã–≤–∞—é—â–∏–π –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é; –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –µ–≥–æ:
#queries = [
#    '–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?',
#    '–ê–Ω–¥—Ä–µ–π, –Ω—É –≥–¥–µ —Ç—ã –±—ã–ª?',
#    '–ê–Ω–¥—Ä–µ–π, –Ω—É –æ–±–Ω–∏–º–∏ –º–µ–Ω—è —Å–∫–æ—Ä–µ–π!',
#    '–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'
#]
#
#for q in queries:
#    result = check_query(q)
#    print(q, '‚Äî', result)
#
#
#words_list = ['—Ä–∞–∑', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '–≤—ã—à–µ–ª', '–∑–∞–π—á–∏–∫', '–ø–æ–≥—É–ª—è—Ç—å']
## –ú–µ—Ç–æ–¥ join() "—Å–∫–ª–µ–∏–≤–∞–µ—Ç" —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞,
## —Å–æ–∑–¥–∞–≤–∞—è —Å—Ç—Ä–æ–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π
## —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º;
## –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–º –¥–µ—Ñ–∏—Å:
#new_string = '-'.join(words_list)
#
#print(new_string)
#
#
#DATABASE = {
#    '–°–µ—Ä—ë–≥–∞': '–û–º—Å–∫',
#    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
#    '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
#    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#    '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
#    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
#    '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
#}
#
#def process_anfisa(query):
#    if query == '–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
#        count = len(DATABASE)
#
#        return '–£ —Ç–µ–±—è ' + str(count) + ' –¥—Ä—É–∑–µ–π.'
#    elif query == '–ö—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#        # –ò–∑ —Å–ª–æ–≤–∞—Ä—è DATABASE —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é join();
#        # –∏–º–µ–Ω–∞ –¥—Ä—É–∑–µ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º.
#        # –ó–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é friends_string (–≤–º–µ—Å—Ç–æ –ø—É—Å—Ç—ã—Ö –∫–∞–≤—ã—á–µ–∫).
#        friends_string = ', '.join(DATABASE)
#
#        # –≠—Ç–æ—Ç —Ü–∏–∫–ª –±–æ–ª—å—à–µ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ
#      #  for friend in DATABASE:
#       #     friends_string += friend + ' '
#
#        return '–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: ' + friends_string
#    elif query == '–ì–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#        unique_cities = set(DATABASE.values())
#        # –ò–∑ —Å–µ—Ç–∞ unique_cities —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é join();
#        # –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º.
#        # –ó–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é cities_string (–≤–º–µ—Å—Ç–æ –ø—É—Å—Ç—ã—Ö –∫–∞–≤—ã—á–µ–∫).
#        cities_string = ', '.join(unique_cities)
#
#        # –≠—Ç–æ—Ç —Ü–∏–∫–ª –±–æ–ª—å—à–µ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ
#       # for city in unique_cities:
#       #     cities_string += city + ' '
#
#        return '–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: ' + cities_string
#    else:
#        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#
#
#print('–ü—Ä–∏–≤–µ—Ç, —è –ê–Ω—Ñ–∏—Å–∞!')
#print(process_anfisa('–°–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?'))
#print(process_anfisa('–ö—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
#print(process_anfisa('–ì–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
#
#
#
#DATABASE = {
#    '–°–µ—Ä—ë–≥–∞': '–û–º—Å–∫',
#    '–°–æ–Ω—è': '–ú–æ—Å–∫–≤–∞',
#    '–ú–∏—à–∞': '–ú–æ—Å–∫–≤–∞',
#    '–î–∏–º–∞': '–ß–µ–ª—è–±–∏–Ω—Å–∫',
#    '–ê–ª–∏–Ω–∞': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫',
#    '–ï–≥–æ—Ä': '–ü–µ—Ä–º—å',
#    '–ö–æ–ª—è': '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫'
#}
#
#
#def format_friends_count(friends_count):
#    if friends_count == 1:
#        return '1 –¥—Ä—É–≥'
#    elif 2 <= friends_count <= 4:
#        return f'{friends_count} –¥—Ä—É–≥–∞'
#    else:
#        return f'{friends_count} –¥—Ä—É–∑–µ–π'
#
#
#def process_anfisa(query):
#    if query == '—Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?':
#        count = len(DATABASE)
#
#        return f'–£ —Ç–µ–±—è {format_friends_count(count)}.'
#    elif query == '–∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#        friends_string = ', '.join(DATABASE)
#        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è: {friends_string}'
#    elif query == '–≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?':
#        unique_cities = set(DATABASE.values())
#        cities_string = ', '.join(unique_cities)
#        return f'–¢–≤–æ–∏ –¥—Ä—É–∑—å—è –≤ –≥–æ—Ä–æ–¥–∞—Ö: {cities_string}'
#    else:
#        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#
#def process_friends(name, query):
#    if name in DATABASE:
#        if query == '—Ç—ã –≥–¥–µ?':
#            city = DATABASE[name]
#            return f'{name} –≤ –≥–æ—Ä–æ–¥–µ {city}'
#        elif  not query =='—Ç—ã –≥–¥–µ?':
#            return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#    elif name not in  DATABASE:
#        return f'–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏ {name}'
#
#    else:
#        return '<–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å>'
#
#def process_query(query):
#    q = query.split(', ')
#    if q[0] == '–ê–Ω—Ñ–∏—Å–∞':
#   # if '–ê–Ω—Ñ–∏—Å–∞' in query:
#       # return process_anfisa(' '.join(query[1::]))
#       return process_anfisa(q[1])
#    else:
#       return process_friends(q[0], q[1])
#
#print('–ü—Ä–∏–≤–µ—Ç, —è –ê–Ω—Ñ–∏—Å–∞!')
#print(process_query('–ê–Ω—Ñ–∏—Å–∞, —Å–∫–æ–ª—å–∫–æ —É –º–µ–Ω—è –¥—Ä—É–∑–µ–π?'))
#print(process_query('–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
#print(process_query('–ê–Ω—Ñ–∏—Å–∞, –≥–¥–µ –≤—Å–µ –º–æ–∏ –¥—Ä—É–∑—å—è?'))
#print(process_query('–ê–Ω—Ñ–∏—Å–∞, –∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç?'))
#print(process_query('–°–æ–Ω—è, —Ç—ã –≥–¥–µ?'))
#print(process_query('–ö–æ–ª—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å?'))
#print(process_query('–ê–Ω—Ç–æ–Ω, —Ç—ã –≥–¥–µ?'))
#
